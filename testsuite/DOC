Resource Map

Trace 1
3/3/0
0.01/0.00/0.01
Trace 2
40/40/0
0.01/0.00/0.00
Trace 3
693/693/0
.34/.32/0.00
Trace 4
1143/1143/0
0.88/0.82/0.02
Trace 5
1623/1623/0
70.80/63.00/0.13

For the resource map implementation, we used a doubly linked list to keep track of the free blocks and their respective sizes.
Size information is kept in the free block itself and the beginning.
The header to this linked list is kept at the beggining of the mainpage. List is maintained by the functiosn addtofreelist, remove, and freeunalloc. 
Addtofreelist adds a free block to the list in order of increasing address. Blocks are ordered by increasing address in order to allow easy coalescing and more efficient memory utilizaiton. Remove takes a free block and removes it from the list. Freeunalloc is called whenever a free command is called and it will iterate through the pages looking for pages that have no allocated blocks and then free them. To free pages, we search through the list starting from the last page, if a page has numalloc =0, we first free pointers to blocks in that page and then the page itself. We keep searching through the pages until we find one where numalloc is greater than 0.
We use the findfirstfit function for resource allocation. This function searches the free list for a block that is large enough to handle the malloc request. If found, the the block is returned, it is removed from the free list, and we try to add the remainder to our free list so we can perserve memory. If not found, we initialize a new page and call findfit again. 